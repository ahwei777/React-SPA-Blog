{"version":3,"sources":["utils.js","WebAPI.js","redux/reducers/errorMessageReducer.js","redux/reducers/userReducer.js","redux/reducers/postReducer.js","redux/store.js","constants/breakpoint.js","components/Header/Header.js","img/avatar.jpg","components/SideBar/SideBar.js","components/templates/Wrapper.js","components/templates/Post.js","components/Loaders/LoopCircleLoading.js","pages/HomePage/HomePage.js","pages/LoginPage/LoginPage.js","pages/RegisterPage/RegisterPage.js","hooks/usePrevious.js","pages/SinglePostPage/SinglePostPage.js","pages/AddPostPage/AddPostPage.js","pages/AboutPage/AboutPage.js","components/templates/PaginationWrapper.js","pages/PaginationPage/PaginationPage.js","pages/UpdatePostPage/UpdatePostPage.js","routes/MainRoutes.js","App.js","index.js"],"names":["TOKEN_NAME","setAuthToken","token","localStorage","setItem","getAuthToken","getItem","BASE_URL","getMeAPI","fetch","headers","authorization","then","res","json","errorMessageSlice","createSlice","name","initialState","errorMessage","reducers","setErrorMessage","state","action","payload","actions","selectErrorMessage","store","error","userSlice","userData","isLogging","isRegistering","isGettingUserData","setUserData","setIsLogging","setIsRegistering","setIsGettingUserData","login","username","password","dispatch","method","body","JSON","stringify","loginAPI","ok","message","resJson","data","catch","err","console","log","register","nickname","registerAPI","selectUserData","user","selectIsGettingUserData","selectIsLogging","selectIsRegistering","postSlice","isGettingPost","singlePostData","allPostData","byPagePostData","totalPostsCount","isAddingPost","addPostResponse","isDeletingPost","isUpdatingPost","updatePostResponse","setIsGettingPost","setSinglePostData","setAllPostData","setByPagePostData","setTotalPostsCount","setIsAddingPost","setAddPostResponse","setIsDeletingPost","setIsUpdatingPost","setUpdatePostResponse","getPost","type","params","id","length","page","count","Number","get","addPost","addPostAPI","deletePost","deletePostAPI","updatePost","updatePostAPI","selectAddPostResponse","posts","selectIsGettingPost","selectIsAddingPost","selectIsDeletingPost","selectAllPostData","selectByPagePostData","selectSinglePostData","selectTotalPostCount","selectIsUpdatingPost","selectUpdatePostResponse","configureStore","reducer","userReducer","postReducer","errorMessageReducer","MEDIA_QUERY_MOBILE_M","MEDIA_QUERY_MOBILE_L","MEDIA_QUERY_TABLET","HeaderContainer","styled","div","NavBarContainer","Brand","NavbarListContainer","NavbarList","Nav","Link","props","$active","WelcomeMessage","Header","useDispatch","history","useHistory","pathname","useLocation","useSelector","useEffect","listen","to","includes","Spinner","animation","variant","onClick","Alert","SideBarWrapper","StyledImg","img","About","Title","Content","IconWrapper","SideBarContent","SideBar","src","avatar","alt","href","size","Wrapper","ButtonWrapper","Body","Post","post","Card","className","border","title","style","textAlign","marginTop","Date","createdAt","toLocaleString","Button","memo","LoadingBackground","PostLoadingBackground","Layout","HomePage","map","LoginPage","useState","setUsername","setPassword","handleInputFocus","push","Form","onSubmit","e","preventDefault","Group","controlId","as","Row","Label","column","sm","Col","Control","placeholder","value","onChange","target","onFocus","RegisterPage","setNickname","usePrevious","ref","useRef","current","PostContainer","PostTitle","PostDate","PostBody","DeleteModal","showDeleteModal","handleCloseDeleteModal","handleDeletePost","Modal","show","onHide","closeButton","Footer","handleShowDeleteModal","userId","SinglePost","useParams","prevIsDeletingPost","setShowDeleteModal","useCallback","PostForm","form","input","textarea","AddPostErrorMessage","AddPost","titleValue","setTitleValue","bodyValue","setBodyValue","prevIsAddingPost","rows","AboutContainer","Aboutitle","AbouContent","AboutPage","PaginationWrapper","postsCount","currentPage","totalPage","Math","ceil","items","number","Pagination","Item","active","PaginationPage","window","scrollTo","ErrorMessage","prevIsUpdatingPost","MainRoutes","exact","path","BlogAppRedux","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2efbd26c.chunk.js","sourcesContent":["const TOKEN_NAME = 'token';\n\nexport const setAuthToken = (token) => {\n  localStorage.setItem(TOKEN_NAME, token);\n};\n\nexport const getAuthToken = () => localStorage.getItem(TOKEN_NAME);\n","import { getAuthToken } from './utils';\n\nconst BASE_URL = 'https://student-json-api.lidemy.me';\n\n//  註冊\nexport const registerAPI = (nickname, username, password) => fetch(`${BASE_URL}/register`, {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n  },\n  body: JSON.stringify({\n    nickname,\n    username,\n    password,\n  }),\n}).then(res => res.json());\n\n//  登入\nexport const loginAPI = (username, password) => fetch(`${BASE_URL}/login`, {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n  },\n  body: JSON.stringify({\n    username,\n    password,\n  }),\n}).then(res => res.json());\n\n//  註冊/登入後會拿到 token ，需再以 token 拿到目前使用者資料，也用於 session 確認\nexport const getMeAPI = () => {\n  const token = getAuthToken();\n  return fetch(`${BASE_URL}/me`, {\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  }).then(res => res.json());\n};\n\n//  拿全部文章\nexport const getAllPostsAPI = () => fetch(`${BASE_URL}/posts?_sort=createdAt&_order=desc`).then(res => res.json());\n//  拿分頁文章，先不轉換 json 格式因為還要從 header 取得所有文章數量\nexport const getPostsByPageAPI = page => fetch(`${BASE_URL}/posts?_sort=createdAt&_order=desc&_page=${page}&_limit=5`);\n//  拿指定 ID 文章\nexport const getSinglePostAPI = id => fetch(`${BASE_URL}/posts?id=${id}`).then(res => res.json());\n\n//  新增文章\nexport const addPostAPI = (data) => {\n  const token = getAuthToken();\n  return fetch(`${BASE_URL}/posts`, {\n    method: 'POST',\n    headers: {\n      authorization: `Bearer ${token}`,\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  }).then(res => res.json());\n};\n\n//  刪除文章\nexport const deletePostAPI = (id) => {\n  const token = getAuthToken();\n  return fetch(`${BASE_URL}/posts/${id}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  }).then(res => res.json());\n};\n\n//  編輯文章\nexport const updatePostAPI = (id, data) => {\n  const token = getAuthToken();\n  return fetch(`${BASE_URL}/posts/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  }).then(res => res.json());\n};\n","/* eslint-disable import/no-unresolved */\n/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nexport const errorMessageSlice = createSlice({\n  name: 'error',\n  initialState: {\n    errorMessage: null,\n  },\n  reducers: {\n    setErrorMessage: (state, action) => {\n      //  參數為單一值非物件\n      state.errorMessage = action.payload;\n    },\n  },\n});\n\n// 設定 action\nexport const { setErrorMessage } = errorMessageSlice.actions;\n\n// selector\nexport const selectErrorMessage = store => store.error.errorMessage;\n\nexport default errorMessageSlice.reducer;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-unresolved */\nimport { createSlice } from '@reduxjs/toolkit';\nimport { registerAPI, loginAPI, getMeAPI } from '../../WebAPI';\nimport { setAuthToken, getAuthToken } from '../../utils';\nimport { setErrorMessage } from './errorMessageReducer';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    userData: null,\n    isLogging: false,\n    isRegistering: false,\n    // 初始值設為 null 避免 render header 時因為還在確認使用者身分而跳字\n    isGettingUserData: null,\n  },\n  reducers: {\n    setUserData: (state, action) => {\n      state.userData = action.payload;\n    },\n    setIsLogging: (state, action) => {\n      state.isLogging = action.payload;\n    },\n    setIsRegistering: (state, action) => {\n      state.isRegistering = action.payload;\n    },\n    setIsGettingUserData: (state, action) => {\n      state.isGettingUserData = action.payload;\n    },\n  },\n});\n\n// 設定 action\nexport const {\n  setUserData,\n  setIsLogging,\n  setIsRegistering,\n  setIsGettingUserData,\n} = userSlice.actions;\n\n// 定義 redux thunk function\nexport const login = (username, password) => (dispatch) => {\n  // 發送中\n  dispatch(setIsLogging(true));\n  loginAPI(username, password)\n    .then((json) => {\n      //  登入失敗\n      if (json.ok === 0) {\n        dispatch(setErrorMessage(json.message));\n        dispatch(setIsLogging(false));\n        return;\n      }\n      //  登入成功將回傳的 token 儲存在 localStorage\n      setAuthToken(json.token);\n      //  取得該使用者資料\n      return getMeAPI().then((resJson) => {\n        //  此 token 查詢帳號資料失敗：清掉 token 後顯示錯誤訊息\n        if (resJson.ok === 0) {\n          setAuthToken('');\n          dispatch(setUserData(null));\n          dispatch(setErrorMessage(resJson.message));\n          dispatch(setIsLogging(false));\n          return;\n        }\n        // 成功登入，設置 user\n        dispatch(setUserData(resJson.data));\n        dispatch(setIsLogging(false));\n      });\n    })\n    .catch((err) => {\n      console.log('err: ', err);\n    });\n};\n\nexport const register = (nickname, username, password) => (dispatch) => {\n  // 發送中\n  dispatch(setIsRegistering(true));\n  registerAPI(nickname, username, password)\n    .then((json) => {\n      if (json.ok === 0) {\n        dispatch(setErrorMessage(json.message));\n        dispatch(setIsRegistering(false));\n        return;\n      }\n      //  註冊成功將回傳的 token 儲存在 localStorage\n      setAuthToken(json.token);\n      //  取得該使用者資料\n      return getMeAPI().then((resJson) => {\n        if (resJson.ok === 0) {\n          //  此 token 查詢帳號資料失敗：清掉 token 後顯示錯誤訊息\n          setAuthToken('');\n          dispatch(setUserData(null));\n          dispatch(setErrorMessage(resJson.message));\n          dispatch(setIsRegistering(false));\n          return;\n        }\n        //  成功註冊，設置 user\n        dispatch(setUserData(resJson.data));\n        dispatch(setIsRegistering(false));\n      });\n    })\n    .catch((err) => {\n      console.log('err: ', err);\n    });\n};\n\nexport const getUserData = () => (dispatch) => {\n  // 沒 token 直接 return\n  if (!getAuthToken()) {\n    dispatch(setUserData(null));\n    dispatch(setIsGettingUserData(false));\n    return;\n  }\n  // 發送中\n  dispatch(setIsGettingUserData(true));\n  getMeAPI()\n    .then((json) => {\n      if (json.ok !== 1) {\n        // 此 token 查詢帳號資料失敗：清掉 token 後顯示錯誤訊息\n        setAuthToken('');\n        dispatch(setUserData(null));\n        dispatch(setErrorMessage(json.message));\n        dispatch(setIsGettingUserData(false));\n        return;\n      }\n      // 成功取得使用者資料\n      dispatch(setUserData(json.data));\n      dispatch(setIsGettingUserData(false));\n    })\n    .catch((err) => {\n      console.log('err: ', err);\n    });\n};\n\n// selector\nexport const selectUserData = (store) => store.user.userData;\nexport const selectIsGettingUserData = (store) => store.user.isGettingUserData;\nexport const selectIsLogging = (store) => store.user.isLogging;\nexport const selectIsRegistering = (store) => store.user.isRegistering;\n\nexport default userSlice.reducer;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-unresolved */\nimport { createSlice } from '@reduxjs/toolkit';\nimport {\n  getSinglePostAPI,\n  getAllPostsAPI,\n  getPostsByPageAPI,\n  addPostAPI,\n  deletePostAPI,\n  updatePostAPI,\n} from '../../WebAPI';\nimport { setErrorMessage } from './errorMessageReducer';\n\nexport const postSlice = createSlice({\n  name: 'posts',\n  initialState: {\n    isGettingPost: false,\n    //  post\n    singlePostData: null,\n    allPostData: null,\n    byPagePostData: null,\n    totalPostsCount: null,\n\n    isAddingPost: false,\n    addPostResponse: null,\n\n    isDeletingPost: false,\n\n    isUpdatingPost: null,\n    updatePostResponse: null,\n  },\n  reducers: {\n    setIsGettingPost: (state, action) => {\n      // 參數為單一值非物件\n      state.isGettingPost = action.payload;\n    },\n    setSinglePostData: (state, action) => {\n      state.singlePostData = action.payload;\n    },\n    setAllPostData: (state, action) => {\n      state.allPostData = action.payload;\n    },\n    setByPagePostData: (state, action) => {\n      state.byPagePostData = action.payload;\n    },\n    setTotalPostsCount: (state, action) => {\n      state.totalPostsCount = action.payload;\n    },\n    setIsAddingPost: (state, action) => {\n      state.isAddingPost = action.payload;\n    },\n    setAddPostResponse: (state, action) => {\n      state.addPostResponse = action.payload;\n    },\n    setIsDeletingPost: (state, action) => {\n      state.isDeletingPost = action.payload;\n    },\n    setIsUpdatingPost: (state, action) => {\n      state.isUpdatingPost = action.payload;\n    },\n    setUpdatePostResponse: (state, action) => {\n      state.updatePostResponse = action.payload;\n    },\n  },\n});\n\n// 設定 action\nexport const {\n  setIsGettingPost,\n  setSinglePostData,\n  setAllPostData,\n  setByPagePostData,\n  setTotalPostsCount,\n  setIsAddingPost,\n  setAddPostResponse,\n  setIsDeletingPost,\n  setIsUpdatingPost,\n  setUpdatePostResponse,\n} = postSlice.actions;\n\n// 定義 redux thunk function\nexport const getPost = (type, params) => (dispatch) => {\n  switch (type) {\n    case 'single':\n      // params: id\n      dispatch(setIsGettingPost(true));\n      getSinglePostAPI(params)\n        .then((json) => {\n          if (json.length === 0) {\n            dispatch(setErrorMessage('此文章不存在或已被刪除'));\n            dispatch(setIsGettingPost(false));\n            return;\n          }\n          // 收到結果\n          dispatch(setSinglePostData(json));\n          dispatch(setIsGettingPost(false));\n        })\n        .catch((err) => {\n          console.log('err: ', err);\n        });\n      break;\n    case 'all':\n      // params: id\n      dispatch(setIsGettingPost(true));\n      getAllPostsAPI()\n        .then((json) => {\n          if (json.length === 0) {\n            dispatch(setErrorMessage('目前無任何文章'));\n            dispatch(setIsGettingPost(false));\n            return;\n          }\n          // 收到結果\n          dispatch(setAllPostData(json));\n          dispatch(setIsGettingPost(false));\n        })\n        .catch((err) => {\n          console.log('err: ', err);\n        });\n      break;\n    case 'byPage':\n      // params: page\n      dispatch(setIsGettingPost(true));\n      getPostsByPageAPI(params)\n        .then((res) => {\n          // 從 response 的 header 拿到目前所有文章數量\n          const count = Number(res.headers.get('x-total-count'));\n          dispatch(setTotalPostsCount(count));\n          // 利用 chaining 特性讓下個 .then 保證拿到已轉化成 json 格式的 response\n          return res.json();\n        })\n        .then((json) => {\n          if (json.length === 0) {\n            dispatch(setErrorMessage('查看的分頁不存在'));\n            dispatch(setIsGettingPost(false));\n            return;\n          }\n          // 收到結果\n          dispatch(setByPagePostData(json));\n          dispatch(setIsGettingPost(false));\n        })\n        .catch((err) => {\n          console.log('err: ', err);\n        });\n      break;\n    default:\n      return false;\n  }\n  return true;\n};\n\nexport const addPost = (data) => (dispatch) => {\n  // 新增中\n  dispatch(setIsAddingPost(true));\n  addPostAPI(data)\n    .then((json) => {\n      if (json.ok === 0) {\n        dispatch(setErrorMessage(json.message));\n        return;\n      }\n      // 新增完畢\n      dispatch(setAddPostResponse(json));\n      dispatch(setIsAddingPost(false));\n    })\n    .catch((err) => {\n      console.log('err: ', err);\n    });\n};\n\nexport const deletePost = (id) => (dispatch) => {\n  // 刪除中\n  dispatch(setIsDeletingPost(true));\n  deletePostAPI(id)\n    .then(() => {\n      // 刪除完畢\n      dispatch(setIsDeletingPost(false));\n    })\n    .catch((err) => {\n      console.log('err: ', err);\n    });\n};\n\nexport const updatePost = (id, data) => (dispatch) => {\n  // 發送中\n  dispatch(setIsUpdatingPost(true));\n  updatePostAPI(id, data)\n    .then((json) => {\n      dispatch(setUpdatePostResponse(json));\n      // 發送完畢\n      dispatch(setIsUpdatingPost(false));\n    })\n    .catch((err) => {\n      console.log('err: ', err);\n    });\n};\n\n// selector\nexport const selectAddPostResponse = (store) => store.posts.addPostResponse;\nexport const selectIsGettingPost = (store) => store.posts.isGettingPost;\nexport const selectIsAddingPost = (store) => store.posts.isAddingPost;\nexport const selectIsDeletingPost = (store) => store.posts.isDeletingPost;\nexport const selectAllPostData = (store) => store.posts.allPostData;\nexport const selectByPagePostData = (store) => store.posts.byPagePostData;\nexport const selectSinglePostData = (store) => store.posts.singlePostData;\nexport const selectTotalPostCount = (store) => store.posts.totalPostsCount;\nexport const selectIsUpdatingPost = (store) => store.posts.isUpdatingPost;\nexport const selectUpdatePostResponse = (store) =>\n  store.posts.updatePostResponse;\n\nexport default postSlice.reducer;\n","/* eslint-disable import/no-unresolved */\nimport { configureStore } from '@reduxjs/toolkit';\nimport userReducer from './reducers/userReducer';\nimport postReducer from './reducers/postReducer';\nimport errorMessageReducer from './reducers/errorMessageReducer';\n\nexport default configureStore({\n  reducer: {\n    user: userReducer,\n    posts: postReducer,\n    error: errorMessageReducer,\n  },\n});\n","export const MEDIA_QUERY_MOBILE_M = '@media screen and (min-width: 375px)';\nexport const MEDIA_QUERY_MOBILE_L = '@media screen and (min-width: 425px)';\nexport const MEDIA_QUERY_TABLET = '@media screen and (min-width: 768px)';\nexport const MEDIA_QUERY_LAPTOP = '@media screen and (min-width: 1024px)';\n","/* eslint-disable import/no-unresolved */\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Alert, Spinner } from 'react-bootstrap';\nimport { Link, useLocation, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  MEDIA_QUERY_MOBILE_M,\n  MEDIA_QUERY_MOBILE_L,\n  MEDIA_QUERY_TABLET,\n} from '../../constants/breakpoint';\nimport {\n  setErrorMessage,\n  selectErrorMessage,\n} from '../../redux/reducers/errorMessageReducer';\nimport {\n  setUserData,\n  selectUserData,\n  selectIsGettingUserData,\n} from '../../redux/reducers/userReducer';\nimport { setAuthToken } from '../../utils';\n\nconst HeaderContainer = styled.div`\n  position: sticky;\n  z-index: 1;\n  top: 0;\n`;\nconst NavBarContainer = styled.div`\n  text-align: center;\n  background: floralwhite;\n  display: flex;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.2);\n  padding: 10px 20px;\n  ${MEDIA_QUERY_MOBILE_M} {\n    flex-direction: column;\n  }\n  ${MEDIA_QUERY_MOBILE_L} {\n    flex-direction: row;\n    padding: 10px;\n  }\n`;\nconst Brand = styled.div`\n  font-weight: bold;\n  margin: 10px auto;\n  ${MEDIA_QUERY_MOBILE_M} {\n    font-size: 50px;\n  }\n  ${MEDIA_QUERY_MOBILE_L} {\n    width: 150px;\n    font-size: 24px;\n    margin: auto 10px;\n  }\n  ${MEDIA_QUERY_TABLET} {\n    width: 350px;\n    font-size: 40px;\n  }\n`;\nconst NavbarListContainer = styled.div`\n  ${MEDIA_QUERY_MOBILE_M} {\n    width: 100%;\n    & + & {\n      margin-top: 6px;\n    }\n  }\n  ${MEDIA_QUERY_MOBILE_L} {\n    margin: auto 10px;\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n  }\n`;\nconst NavbarList = styled.div`\n  display: flex;\n  ${MEDIA_QUERY_MOBILE_M} {\n    font-size: 24px;\n    flex-direction: column;\n    align-items: center;\n    & + & {\n      margin-top: 6px;\n    }\n  }\n  ${MEDIA_QUERY_MOBILE_L} {\n    font-size: 18px;\n    flex-direction: row;\n    & + & {\n      margin-top: 0px;\n    }\n  }\n`;\nconst Nav = styled(Link)`\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 8px;\n  font-weight: bold;\n  cursor: pointer;\n  color: black;\n  text-decoration: none;\n  ${(props) =>\n    props.$active &&\n    `\n    background: rgba(0, 0, 0, 0.1);\n  `}\n  ${MEDIA_QUERY_MOBILE_M} {\n    width: 100%;\n    & + & {\n      margin-top: 6px;\n    }\n  }\n  ${MEDIA_QUERY_MOBILE_L} {\n    padding: 5px 10px;\n    width: auto;\n    & + & {\n      margin-top: 0px;\n      margin-left: 6px;\n    }\n  }\n  ${MEDIA_QUERY_TABLET} {\n    font-size: 24px;\n  }\n`;\nconst WelcomeMessage = styled.div`\n  background-color: cadetblue;\n  text-align: center;\n  font-size: 18px;\n  color: white;;\n  padding: 3px;\n`;\n\nexport default function Header() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { pathname } = useLocation();\n  // 取得當下 user 的狀態(未登入:null, 已登入：帳號資料物件)\n  const userData = useSelector(selectUserData);\n  const errorMessage = useSelector(selectErrorMessage);\n  const isGettingUserData = useSelector(selectIsGettingUserData);\n\n  //  當路徑改變時先將錯誤訊息清空\n  useEffect(\n    () =>\n      history.listen(() => {\n        dispatch(setErrorMessage(null));\n      }),\n    [dispatch, history]\n  );\n\n  const handleLogout = () => {\n    // 登出清空 Token 及 user\n    setAuthToken('');\n    dispatch(setUserData(null));\n  };\n  return (\n    <>\n      <HeaderContainer>\n        <NavBarContainer>\n          <Brand>Redux Blog</Brand>\n          <NavbarListContainer>\n            <NavbarList>\n              <Nav $active={pathname === '/'} to=\"/\">\n                首頁\n              </Nav>\n              <Nav $active={pathname === '/About'} to=\"/About\">\n                關於我\n              </Nav>\n              <Nav\n                $active={pathname.includes('/pagination')}\n                to=\"/pagination/1\"\n              >\n                文章分頁\n              </Nav>\n            </NavbarList>\n            <NavbarList>\n              {/* 初始化時因為 userData 初始值為 null，需等待確認完身分後再顯示 */}\n              {isGettingUserData && (\n                <Spinner animation=\"border\" variant=\"primary\" />\n              )}\n              {!userData && isGettingUserData === false && (\n                <>\n                  <Nav $active={pathname === '/register'} to=\"/register\">\n                    註冊\n                  </Nav>\n                  <Nav $active={pathname === '/login'} to=\"/login\">\n                    登入\n                  </Nav>\n                </>\n              )}\n              {userData && isGettingUserData === false && (\n                <>\n                  <Nav $active={pathname === '/new-post'} to=\"/new-post\">\n                    發布文章\n                  </Nav>\n                  <Nav onClick={handleLogout} to=\"/\">\n                    登出\n                  </Nav>\n                </>\n              )}\n            </NavbarList>\n          </NavbarListContainer>\n        </NavBarContainer>\n\n        {userData && (\n          <WelcomeMessage>\n            Hello! \n            {' '}\n            {userData.nickname}\n          </WelcomeMessage>\n        )}\n        {errorMessage && <Alert variant=\"danger\">{errorMessage}</Alert>}\n      </HeaderContainer>\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/avatar.53976cb0.jpg\";","/* eslint-disable import/no-unresolved */\nimport React from 'react';\nimport styled from 'styled-components';\nimport avatar from '../../img/avatar.jpg';\nimport { GoMarkGithub } from 'react-icons/go';\nimport { FaFacebook, FaTwitter } from 'react-icons/fa';\nimport {\n  MEDIA_QUERY_MOBILE_M,\n  MEDIA_QUERY_TABLET,\n} from '../../constants/breakpoint';\n\nconst SideBarWrapper = styled.div`\n  ${MEDIA_QUERY_MOBILE_M} {\n    display: none;\n  }\n  ${MEDIA_QUERY_TABLET} {\n    display: block;\n    width: 200px;\n    top: 135px;\n    position: fixed;\n    background: white;\n    opacity: 0.9;\n    left: 20px;\n    border-radius: 5px;\n    padding: 15px;\n  }\n`;\nconst StyledImg = styled.img`\n  width: 100%;\n  border-radius: 5px;\n`;\n\nconst About = styled.div`\n  margin-top: 10px;\n  color: grey;\n`;\nconst Title = styled.div`\nmargin-top: 20px;\n  font-size: 24px;\n`;\nconst Content = styled.div`\n  font-size: 16px;\n  margin: 10px auto;\n`;\nconst IconWrapper = styled.div`\n  margin-top: 60px;\n  text-align: right;\n  & > a {\n    color: black;\n  }\n  & > svg:hover,\n  & > a:hover {\n    cursor: pointer;\n    color: grey;\n  }\n`;\n\nconst SideBarContent = styled.div``;\n\nconst SideBar = () => (\n  <SideBarWrapper>\n    <SideBarContent>\n      <StyledImg src={avatar} alt=\"img\" />\n      <About>About Me</About>\n      <Title>Ahwei777</Title>\n      <Content>\n        在這一不小心就忘掉什麼的人生旅途中，試著拼湊出一點生活的記憶\n      </Content>\n      <IconWrapper>\n        <a href=\"https://github.com/ahwei777\">\n          <GoMarkGithub size={'2em'} />\n        </a>\n        <FaFacebook size={'2em'} />\n        <FaTwitter size={'2em'} />\n      </IconWrapper>\n    </SideBarContent>\n  </SideBarWrapper>\n);\n\nexport default SideBar;\n","/* eslint-disable react/prop-types */\n/* eslint-disable import/no-unresolved */\nimport styled from 'styled-components';\nimport {\n  MEDIA_QUERY_MOBILE_M,\n  MEDIA_QUERY_TABLET,\n} from '../../constants/breakpoint';\n\nconst Wrapper = styled.div`\n  background: white;\n  min-height: 100vh;\n  opacity: 0.8;\n  width: 100%;\n  border-radius: 10px;\n  padding: 20px;\n  ${MEDIA_QUERY_MOBILE_M} {\n    margin: 20px;\n  }\n  ${MEDIA_QUERY_TABLET} {\n    margin-left: 250px;\n  }\n`;\n\nexport default Wrapper;\n","/* eslint-disable react/prop-types */\n/* eslint-disable import/no-unresolved */\nimport React, { memo } from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst ButtonWrapper = styled.div`\n  text-align: right;\n`;\n\nconst Body = styled.div`\n  margin: 1.5em auto;\n  overflow-wrap: break-word;\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n`;\n\nfunction Post({ post }) {\n  return (\n    <Card className=\"mb-4\" border=\"secondary\">\n      <Card.Body>\n        <blockquote className=\"blockquote mb-0\">\n          <h3> {post.title} </h3>\n          <footer className=\"blockquote-footer\" style={{ textAlign: 'right', marginTop: '20px' }}>\n            {new Date(post.createdAt).toLocaleString()}\n          </footer>\n        </blockquote>\n        <Body>{post.body}</Body>\n        <ButtonWrapper>\n          <Link to={`/posts/${post.id}`}>\n            <Button variant=\"outline-secondary\">Read More...</Button>\n          </Link>\n        </ButtonWrapper>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default memo(Post);\n","/* eslint-disable import/no-unresolved */\nimport React from 'react';\nimport styled from 'styled-components';\nimport { LoopCircleLoading } from 'react-loadingg';\n\nconst LoadingBackground = styled.div`\n  z-index: 99;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\nconst PostLoadingBackground = () => (\n  <LoadingBackground>\n    <LoopCircleLoading />\n  </LoadingBackground>\n);\nexport default PostLoadingBackground;\n","/* eslint-disable react/prop-types */\n/* eslint-disable import/no-unresolved */\nimport React, { useEffect, memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport {\n  getPost,\n  setAllPostData,\n  selectIsGettingPost,\n  selectAllPostData,\n} from '../../redux/reducers/postReducer';\nimport SideBar from '../../components/SideBar';\nimport Wrapper from '../../components/templates/Wrapper';\nimport Post from '../../components/templates/Post';\nimport PostLoadingBackground from '../../components/Loaders/LoopCircleLoading';\n\nconst Layout = styled.div`\n  display: flex;\n`;\n\nfunction HomePage() {\n  const dispatch = useDispatch();\n  const isGettingPost = useSelector(selectIsGettingPost);\n  const allPostData = useSelector(selectAllPostData);\n\n  // component mount 時執行(初始化)\n  useEffect(() => {\n    dispatch(getPost('all'));\n    // unmount 時先 clean up 避免下次回來時因為仍有舊資料而短暫顯示\n    return () => {\n      dispatch(setAllPostData(null));\n    };\n  }, [dispatch]);\n\n  return (\n    <>\n      {isGettingPost && <PostLoadingBackground />}\n      <Layout>\n        <SideBar />\n        <Wrapper>\n          {allPostData && allPostData.length > 0 && (\n            <>\n              {allPostData.map((post) => (\n                <Post key={post.id} post={post} />\n              ))}\n            </>\n          )}\n        </Wrapper>\n      </Layout>\n    </>\n  );\n}\n\nexport default memo(HomePage);\n","/* eslint-disable import/no-unresolved */\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\nimport {\n  Form, Button, Col, Row, Spinner\n} from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, selectUserData, selectIsLogging } from '../../redux/reducers/userReducer';\nimport { setErrorMessage } from '../../redux/reducers/errorMessageReducer';\n\nconst Wrapper = styled.div`\n  text-align: center;\n  margin: 50px auto;\n  background: white;\n  opacity: 0.8;\n  border-radius: 10px;\n  padding: 50px;\n`;\n\nexport default function LoginPage() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  //  input state 直接存在 component 內\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  // 引入 store 內的 state\n  const isLogging = useSelector(selectIsLogging);\n  const userData = useSelector(selectUserData);\n\n  //  點擊送出表單 call dispatch\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(login(username, password));\n  };\n  //  重新輸入時清掉錯誤訊息\n  const handleInputFocus = () => {\n    dispatch(setErrorMessage(null));\n  };\n\n  useEffect(() => {\n    //  監聽 userData，當登入成功後會被更新，再導至首頁\n    if (userData) {\n      history.push('/BlogAppRedux/');\n    }\n  }, [userData, history]);\n\n  return (\n    <Wrapper>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group controlId=\"formBasicUsername\" as={Row}>\n          <Form.Label column sm=\"4\">\n            Username\n          </Form.Label>\n          <Col sm=\"8\">\n            <Form.Control\n              type=\"username\"\n              placeholder=\"Enter username\"\n              value={username}\n              onChange={e => setUsername(e.target.value)}\n              onFocus={handleInputFocus}\n            />\n          </Col>\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicPassword\" as={Row}>\n          <Form.Label column sm=\"4\">\n            Password\n          </Form.Label>\n          <Col sm=\"8\">\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Enter Password\"\n              value={password}\n              onChange={e => setPassword(e.target.value)}\n              onFocus={handleInputFocus}\n            />\n          </Col>\n        </Form.Group>\n        {isLogging && (\n          <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" variant=\"primary\"/>\n          </div>\n        )}\n        {!isLogging && (\n          <Button variant=\"primary\" size=\"lg\" className=\"mt-4\" type=\"submit\">\n            登入\n          </Button>\n        )}\n      </Form>\n    </Wrapper>\n  );\n}\n","/* eslint-disable import/no-unresolved */\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\nimport {\n  Form, Button, Col, Row, Spinner\n} from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register, selectIsRegistering, selectUserData } from '../../redux/reducers/userReducer';\nimport { setErrorMessage } from '../../redux/reducers/errorMessageReducer';\n\nconst Wrapper = styled.div`\n  text-align: center;\n  margin: 50px auto;\n  background: white;\n  opacity: 0.8;\n  border-radius: 10px;\n  padding: 50px;\n`;\n\nexport default function RegisterPage() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  //  input 狀態存在 component 內\n  const [nickname, setNickname] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  // 引入 store 內的 state\n  const isRegistering = useSelector(selectIsRegistering);\n  const userData = useSelector(selectUserData);\n\n  //  點擊送出表單 call dispatch\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(register(nickname, username, password));\n  };\n  //  重新輸入時清掉錯誤訊息\n  const handleInputFocus = () => {\n    dispatch(setErrorMessage(null));\n  };\n\n  useEffect(() => {\n    //  監聽 userData，當註冊成功後會更新 userData，再導至首頁\n    if (userData) {\n      history.push('/BlogAppRedux/');\n    }\n  }, [dispatch, userData, history]);\n\n  return (\n    <Wrapper>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group controlId=\"formBasicNickname\" as={Row}>\n          <Form.Label column sm=\"4\">\n            Nickname\n          </Form.Label>\n          <Col sm=\"8\">\n            <Form.Control\n              type=\"nickname\"\n              placeholder=\"Enter nickname\"\n              value={nickname}\n              onChange={e => setNickname(e.target.value)}\n              onFocus={handleInputFocus}\n            />\n          </Col>\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicUsername\" as={Row}>\n          <Form.Label column sm=\"4\">\n            Username\n          </Form.Label>\n          <Col sm=\"8\">\n            <Form.Control\n              type=\"username\"\n              placeholder=\"Enter username\"\n              value={username}\n              onChange={e => setUsername(e.target.value)}\n              onFocus={handleInputFocus}\n            />\n          </Col>\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicPassword\" as={Row}>\n          <Form.Label column sm=\"4\">\n            Password\n          </Form.Label>\n          <Col sm=\"8\">\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Enter Password\"\n              value={password}\n              onChange={e => setPassword(e.target.value)}\n              onFocus={handleInputFocus}\n            />\n          </Col>\n        </Form.Group>\n        {/* 註冊 Loader */}\n        {isRegistering && (\n          <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" variant=\"primary\" />\n          </div>\n        )}\n        {/* 註冊按鈕在 call API 期間隱藏 */}\n        {!isRegistering && (\n          <Button variant=\"primary\" size=\"lg\" className=\"mt-4\" type=\"submit\">\n            註冊\n          </Button>\n        )}\n      </Form>\n    </Wrapper>\n  );\n}\n","/* eslint-disable import/no-unresolved */\nimport { useEffect, useRef } from 'react';\n\n// Hook\nexport default function usePrevious(value) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef();\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n","/* eslint-disable react/prop-types */\n/* eslint-disable import/no-unresolved */\nimport React, { useEffect, useState, memo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { Button, Modal, Spinner } from 'react-bootstrap';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport usePrevious from '../../hooks/usePrevious';\nimport {\n  getPost,\n  setSinglePostData,\n  deletePost,\n  selectIsGettingPost,\n  selectIsDeletingPost,\n  selectSinglePostData,\n} from '../../redux/reducers/postReducer';\nimport { selectUserData } from '../../redux/reducers/userReducer';\nimport PostLoadingBackground from '../../components/Loaders/LoopCircleLoading';\n\nconst Wrapper = styled.div`\n  width: 80%;\n  background: white;\n  opacity: 0.8;\n  border-radius: 10px;\n  padding: 20px;\n  margin: 20px auto;\n  min-height: 50vh;\n`;\nconst PostContainer = styled.div`\n  padding: 16px;\n`;\nconst PostTitle = styled.div`\n  font-size: 48px;\n  font-weight: bold;\n  margin-bottom: 16px;\n`;\nconst PostDate = styled.div`\n  color: rgba(0, 0, 0, 0.5);\n  text-align: end;\n`;\nconst PostBody = styled.div`\n  margin: 16px auto;\n  border: 1px solid black;\n  padding: 16px;\n  border-radius: 8px;\n`;\nconst ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  height: 64px;\n`;\n\nfunction DeleteModal({\n  showDeleteModal,\n  handleCloseDeleteModal,\n  handleDeletePost,\n  isDeletingPost,\n}) {\n  return (\n    <>\n      <Modal show={showDeleteModal} onHide={handleCloseDeleteModal}>\n        <Modal.Header closeButton>\n          <Modal.Title>提示</Modal.Title>\n        </Modal.Header>\n        {isDeletingPost && (\n          <div className=\"d-flex justify-content-center py-5\">\n            <Spinner animation=\"border\" variant=\"danger\" />\n          </div>\n        )}\n        {!isDeletingPost && (\n          <>\n            <Modal.Body>確定刪除此篇文章嗎?</Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={handleCloseDeleteModal}>\n                取消\n              </Button>\n              <Button variant=\"danger\" onClick={handleDeletePost}>\n                確定\n              </Button>\n            </Modal.Footer>\n          </>\n        )}\n      </Modal>\n    </>\n  );\n}\n\nconst Post = memo(({ singlePostData, handleShowDeleteModal, userData, id }) => {\n  return (\n    <PostContainer>\n      <PostTitle>{singlePostData[0].title}</PostTitle>\n      <PostDate>\n        {new Date(singlePostData[0].createdAt).toLocaleString()}\n      </PostDate>\n      {/* 權限驗證：登入者的 ID 為此篇文章作者的 ID 時才可編輯及刪除 */}\n      {userData && userData.id === singlePostData[0].userId && (\n        <ButtonWrapper>\n          <Button className=\"mr-3\" variant=\"info\" href={`#/update-post/${id}`}>\n            編輯\n          </Button>\n          <Button variant=\"danger\" onClick={handleShowDeleteModal}>\n            刪除\n          </Button>\n        </ButtonWrapper>\n      )}\n      <PostBody>{singlePostData[0].body}</PostBody>\n    </PostContainer>\n  );\n});\n\nexport default function SinglePost() {\n  //  取得在 Route 中設定的 URL 參數\n  const { id } = useParams();\n  const history = useHistory();\n\n  // 引入 redux function 及 store\n  const dispatch = useDispatch();\n  const userData = useSelector(selectUserData);\n  const isGettingPost = useSelector(selectIsGettingPost);\n  const singlePostData = useSelector(selectSinglePostData);\n  const isDeletingPost = useSelector(selectIsDeletingPost);\n  const prevIsDeletingPost = usePrevious(isDeletingPost);\n  const handleDeletePost = () => {\n    dispatch(deletePost(id));\n  };\n\n  //  刪除確認視窗\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const handleShowDeleteModal = useCallback(() => {\n    setShowDeleteModal(true);\n  }, [setShowDeleteModal]);\n  const handleCloseDeleteModal = () => setShowDeleteModal(false);\n\n  // 當 id 改變時就呼叫 redux thunk 協助 call API\n  useEffect(() => {\n    dispatch(getPost('single', id));\n    return () => {\n      // clean up\n      dispatch(setSinglePostData(null));\n    };\n  }, [dispatch, id]);\n\n  useEffect(() => {\n    if (!isDeletingPost && prevIsDeletingPost) {\n      //  藉由 isDeletingPost 狀態前後的變化來確認是否\"剛刪除\"文章\n      //  1. 發送 request 前，isDeletingPost: false, prevIsDeletingPost: false\n      //  2. 開始發送 request, isDeletingPost: true, prevIsDeletingPost: false\n      //  3. 收到 response, isDeletingPost: false, prevIsDeletingPost: true\n      history.push('/');\n    }\n  }, [history, isDeletingPost, prevIsDeletingPost]);\n\n  return (\n    <>\n      {isGettingPost && <PostLoadingBackground />}\n      <DeleteModal\n        showDeleteModal={showDeleteModal}\n        handleCloseDeleteModal={handleCloseDeleteModal}\n        handleDeletePost={handleDeletePost}\n        isDeletingPost={isDeletingPost}\n      />\n      <Wrapper>\n        {singlePostData && singlePostData.length > 0 && (\n          <Post\n            singlePostData={singlePostData}\n            handleShowDeleteModal={handleShowDeleteModal}\n            isDeletingPost={isDeletingPost}\n            userData={userData}\n            id={id}\n          />\n        )}\n      </Wrapper>\n    </>\n  );\n}\n","/* eslint-disable import/no-unresolved */\nimport React, { useEffect, useState } from 'react';\nimport { Button, Spinner } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addPost,\n  selectAddPostResponse,\n  selectIsAddingPost,\n} from '../../redux/reducers/postReducer';\nimport { setErrorMessage } from '../../redux/reducers/errorMessageReducer';\nimport usePrevious from '../../hooks/usePrevious';\n\nconst Wrapper = styled.div`\n  background: white;\n  opacity: 0.8;\n  width: 80%;\n  border-radius: 10px;\n  margin: 20px auto;\n  padding: 20px;\n`;\nconst PostForm = styled.form``;\nconst PostTitle = styled.input`\n  padding: 8px;\n  font-size: 24px;\n  font-weight: bold;\n  margin: 10px auto;\n  border: 1px solid black;\n  border-radius: 8px;\n  width: 50%;\n`;\nconst PostBody = styled.textarea`\n  padding: 8px;\n  font-size: 16px;\n  margin: 10px auto;\n  border: 1px solid black;\n  border-radius: 8px;\n  width: 100%;\n  resize: none;\n`;\nconst AddPostErrorMessage = styled.div`\n  color: red;\n  font-weight: bold;\n  font-size: 36px;\n  text-align: center;\n  margin-top: 1rem;\n`;\n\nexport default function AddPost() {\n  const [titleValue, setTitleValue] = useState('');\n  const [bodyValue, setBodyValue] = useState('');\n  const history = useHistory();\n\n  const dispatch = useDispatch();\n  // 從 store 中取得 state\n  const addPostResponse = useSelector(selectAddPostResponse);\n  const isAddingPost = useSelector(selectIsAddingPost);\n  const prevIsAddingPost = usePrevious(isAddingPost);\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    const data = {\n      title: titleValue,\n      body: bodyValue,\n    };\n    dispatch(addPost(data));\n  };\n\n  useEffect(() => {\n    //  藉由 isAddingPost 狀態前後的變化來確認是否剛新增完文章\n    //  1. 發送 request 前，isAddingPost: false, prevIsAddingPost: false\n    //  2. 開始發送 request, isAddingPost: true, prevIsAddingPost: false\n    //  3. 收到 response, isAddingPost: false, prevIsAddingPost: true\n    if (!isAddingPost && prevIsAddingPost) {\n      history.push(`/BlogAppRedux/posts/${addPostResponse.id}`);\n    }\n  }, [dispatch, history, addPostResponse, isAddingPost, prevIsAddingPost]);\n\n  return (\n    <Wrapper>\n      <PostForm onSubmit={handleFormSubmit}>\n        <div>\n          <div>文章標題：</div>\n          <PostTitle\n            value={titleValue}\n            onChange={(e) => {\n              setTitleValue(e.target.value);\n            }}\n            onFocus={() => {\n              dispatch(setErrorMessage(null));\n            }}\n          />\n        </div>\n        <div>\n          <div>文章內容：</div>\n          <PostBody\n            rows={6}\n            value={bodyValue}\n            onChange={(e) => {\n              setBodyValue(e.target.value);\n            }}\n            onFocus={() => {\n              dispatch(setErrorMessage(null));\n            }}\n          />\n        </div>\n        <div className=\"d-flex justify-content-center\">\n          {isAddingPost && <Spinner animation=\"border\" variant=\"primary\" />}\n          {!isAddingPost && (\n            <Button variant=\"primary\" size=\"lg\" className=\"\" type=\"submit\">\n              送出\n            </Button>\n          )}\n        </div>\n        {addPostResponse && addPostResponse.ok === 0 && (\n          <AddPostErrorMessage>{addPostResponse.message}</AddPostErrorMessage>\n        )}\n      </PostForm>\n    </Wrapper>\n  );\n}\n","/* eslint-disable import/no-unresolved */\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  background: white;\n  opacity: 0.8;\n  width: 80%;\n  border-radius: 10px;\n  margin: 20px auto;\n  padding: 10px;\n`;\n\nconst AboutContainer = styled.div`\n  padding: 16px;\n`;\nconst Aboutitle = styled.div`\n  font-size: 48px;\n  font-weight: bold;\n  margin-bottom: 16px;\n`;\n\nconst AbouContent = styled.div`\n  margin: 16px auto;\n  border: 1px solid black;\n  padding: 16px;\n  border-radius: 8px;\n`;\n\nexport default function AboutPage() {\n  return (\n    <Wrapper>\n      <AboutContainer>\n        <Aboutitle>關於我</Aboutitle>\n        <AbouContent>\n          漢皇重色思傾國，御宇多年求不得。 楊家有女初長成，養在深閨人未識。\n          天生麗質難自棄，一朝選在君王側。 回眸一笑百媚生，六宮粉黛無顏色。\n          春寒賜浴華清池，溫泉水滑洗凝脂。 侍兒扶起嬌無力，始是新承恩澤時。\n          雲鬢花顏金步搖，芙蓉帳暖度春宵。 春宵苦短日高起，從此君王不早朝。\n          承歡侍宴無閒暇，春從春遊夜專夜。 後宮佳麗三千人，三千寵愛在一身。\n          金屋妝成嬌侍夜，玉樓宴罷醉和春。 姊妹弟兄皆列土，可憐光彩生門戶。\n          遂令天下父母心，不重生男重生女。 驪宮高處入青雲，仙樂風飄處處聞。\n          緩歌慢舞凝絲竹，盡日君王看不足。 漁陽鼙鼓動地來，驚破霓裳羽衣曲。\n          九重城闕煙塵生，千乘萬騎西南行。 翠華搖搖行復止，西出都門百餘里。\n          六軍不發無奈何，宛轉蛾眉馬前死。 花鈿委地無人收，翠翹金雀玉搔頭。\n          君王掩面救不得，回看血淚相和流。 黃埃散漫風蕭索，雲棧縈紆登劍閣。\n          峨嵋山下少人行，旌旗無光日色薄。 蜀江水碧蜀山青，聖主朝朝暮暮情。\n          行宮見月傷心色，夜雨聞鈴腸斷聲。 天旋日轉迴龍馭，到此躊躇不能去。\n          馬嵬坡下泥土中，不見玉顏空死處。 君臣相顧盡沾衣，東望都門信馬歸。\n          歸來池苑皆依舊，太液芙蓉未央柳。 芙蓉如面柳如眉，對此如何不淚垂。\n          春風桃李花開日，秋雨梧桐葉落時。 西宮南內多秋草，落葉滿階紅不掃。\n          梨園子弟白髮新，椒房阿監青娥老。 夕殿螢飛思悄然，孤燈挑盡未成眠。\n          遲遲鐘鼓初長夜，耿耿星河欲曙天。 鴛鴦瓦冷霜華重，翡翠衾寒誰與共。\n          悠悠生死別經年，魂魄不曾來入夢。 臨邛道士鴻都客，能以精誠致魂魄。\n          為感君王輾轉思，遂教方士殷勤覓。 排空馭氣奔如電，升天入地求之遍。\n          上窮碧落下黃泉，兩處茫茫皆不見。 忽聞海上有仙山，山在虛無縹緲間。\n          樓閣玲瓏五雲起，其中綽約多仙子。 中有一人字太真，雪膚花貌參差是。\n          金闕西廂叩玉扃，轉教小玉報雙成。 聞道漢家天子使，九華帳裏夢魂驚。\n          攬衣推枕起徘徊，珠箔銀屏迤邐開。 雲髻半偏新睡覺，花冠不整下堂來。\n          風吹仙袂飄颻舉，猶似霓裳羽衣舞。 玉容寂寞淚闌干，梨花一枝春帶雨。\n          含情凝睇謝君王，一別音容兩渺茫。 昭陽殿裏恩愛絕，蓬萊宮中日月長。\n          回頭下望人寰處，不見長安見塵霧。 唯將舊物表深情，鈿合金釵寄將去。\n          釵留一股合一扇，釵擘黃金合分鈿。 但教心似金鈿堅，天上人間會相見。\n          臨別殷勤重寄詞，詞中有誓兩心知。 七月七日長生殿，夜半無人私語時。\n          在天願作比翼鳥，在地願為連理枝。 天長地久有時盡，此恨綿綿無絕期。\n        </AbouContent>\n      </AboutContainer>\n    </Wrapper>\n  );\n}\n","/* eslint-disable react/prop-types */\n/* eslint-disable import/no-unresolved */\nimport React, { memo } from 'react';\nimport { Pagination } from 'react-bootstrap';\n\nconst PaginationWrapper = ({ postsCount, currentPage }) => {\n  const postsPerPage = 5;\n  const totalPage = Math.ceil(postsCount / postsPerPage);\n  const items = [];\n  for (let number = 1; number <= totalPage; number += 1) {\n    items.push(\n      <Pagination.Item\n        key={number}\n        active={number === Number(currentPage)}\n        href={`#/pagination/${number}`}\n      >\n        {number}\n      </Pagination.Item>,\n    );\n  }\n  return (\n    <Pagination className=\"d-flex justify-content-center\" size=\"lg\">\n      {items}\n    </Pagination>\n  );\n};\n\nexport default memo(PaginationWrapper);\n","/* eslint-disable react/prop-types */\n/* eslint-disable import/no-unresolved */\nimport React, { useEffect, memo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Wrapper from '../../components/templates/Wrapper';\nimport Post from '../../components/templates/Post';\nimport PaginationWrapper from '../../components/templates/PaginationWrapper';\nimport styled from 'styled-components';\nimport {\n  getPost,\n  setByPagePostData,\n  selectIsGettingPost,\n  selectByPagePostData,\n  selectTotalPostCount,\n} from '../../redux/reducers/postReducer';\nimport PostLoadingBackground from '../../components/Loaders/LoopCircleLoading';\nimport SideBar from '../../components/SideBar';\n\nconst Layout = styled.div`\n  display: flex;\n`;\n\nfunction PaginationPage() {\n  const { page } = useParams();\n  const dispatch = useDispatch();\n  const isGettingPost = useSelector(selectIsGettingPost);\n  const byPagePostData = useSelector(selectByPagePostData);\n  const totalPostsCount = useSelector(selectTotalPostCount);\n\n  // page 更新時拿新資料\n  useEffect(() => {\n    dispatch(getPost('byPage', page));\n    // 跳轉至葉面頂端，提升使用者體驗\n    window.scrollTo(0, 0);\n    //  clean up 避免下次回來時因為仍有舊資料而短暫顯示\n    return () => {\n      dispatch(setByPagePostData(null));\n    };\n  }, [dispatch, page]);\n\n  return (\n    <>\n      {isGettingPost && <PostLoadingBackground />}\n\n      <Layout>\n        <SideBar />\n        <Wrapper>\n          {byPagePostData && byPagePostData.length > 0 && (\n            <>\n              {/* post */}\n              {byPagePostData.map((post) => (\n                <Post key={post.id} post={post} />\n              ))}\n              {/* 分頁按鈕列 */}\n              <PaginationWrapper\n                postsCount={totalPostsCount}\n                currentPage={page}\n              />\n            </>\n          )}\n        </Wrapper>\n      </Layout>\n    </>\n  );\n}\n\nexport default memo(PaginationPage);\n","/* eslint-disable import/no-unresolved */\nimport React, { useEffect, useState } from 'react';\nimport { Button, Spinner } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getPost,\n  setSinglePostData,\n  updatePost,\n  setUpdatePostResponse,\n  selectIsGettingPost,\n  selectSinglePostData,\n  selectUpdatePostResponse,\n  selectIsUpdatingPost,\n} from '../../redux/reducers/postReducer';\nimport { selectUserData } from '../../redux/reducers/userReducer';\nimport usePrevious from '../../hooks/usePrevious';\nimport PostLoadingBackground from '../../components/Loaders/LoopCircleLoading';\nimport { setErrorMessage } from '../../redux/reducers/errorMessageReducer';\n\nconst Wrapper = styled.div`\n  background: white;\n  opacity: 0.8;\n  width: 80%;\n  border-radius: 10px;\n  margin: 20px auto;\n  padding: 20px;\n`;\nconst PostForm = styled.form``;\nconst PostTitle = styled.input`\n  padding: 8px;\n  font-size: 24px;\n  font-weight: bold;\n  margin: 10px auto;\n  border: 1px solid black;\n  border-radius: 8px;\n  width: 50%;\n`;\nconst PostBody = styled.textarea`\n  padding: 8px;\n  font-size: 16px;\n  margin: 10px auto;\n  border: 1px solid black;\n  border-radius: 8px;\n  width: 100%;\n  resize: none;\n`;\nconst ErrorMessage = styled.div`\n  text-align: center;\n  font-size: 36px;\n  font-weight: bold;\n  color: red;\n`;\nconst AddPostErrorMessage = styled.div`\n  color: red;\n  font-weight: bold;\n  font-size: 36px;\n  text-align: center;\n  margin-top: 1rem;\n`;\n\nexport default function AddPost() {\n  // 取得在 Route 中設定的 URL 參數\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  // 從 store 中取得 state\n  const isGettingPost = useSelector(selectIsGettingPost);\n  const singlePostData = useSelector(selectSinglePostData);\n  const updatePostResponse = useSelector(selectUpdatePostResponse);\n  const isUpdatingPost = useSelector(selectIsUpdatingPost);\n  const prevIsUpdatingPost = usePrevious(isUpdatingPost);\n  // 權限驗證\n  const userData = useSelector(selectUserData);\n\n  // input 放在 component state\n  const [titleValue, setTitleValue] = useState('');\n  const [bodyValue, setBodyValue] = useState('');\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    const data = {\n      title: titleValue,\n      body: bodyValue,\n    };\n    // 由 redux thunk 協助 call API\n    dispatch(updatePost(id, data));\n  };\n\n  // 當 id 改變時就呼叫 redux thunk 協助 call API\n  useEffect(() => {\n    // 權限管理\n    if (!userData) {\n      return dispatch(setErrorMessage('您無權限操作，請先登入'))\n    }\n    dispatch(getPost('single', id));\n    // clean up function when dependencies change and component unmount\n    return () => {\n      dispatch(setSinglePostData(null));\n    };\n  }, [dispatch, id, userData]);\n\n  useEffect(() => {\n    //  收到回傳文章時將資料放入\n    if (singlePostData && singlePostData.length > 0) {\n      setTitleValue(singlePostData[0].title);\n      setBodyValue(singlePostData[0].body);\n    }\n  }, [singlePostData]);\n\n  useEffect(() => {\n    if (updatePostResponse && updatePostResponse.id) {\n      // 藉由 isUpdatingPost 狀態前後的變化來確認是否\"剛更新完\"文章\n      // 1. 發送 request 前，isUpdatingPost: false, prevIsUpdatingPost: false\n      // 2. 開始發送 request, isUpdatingPost: true, prevIsUpdatingPost: false\n      // 3. 收到 response, isUpdatingPost: false, prevIsUpdatingPost: true\n      if (!isUpdatingPost && prevIsUpdatingPost) {\n        history.push(`/BlogAppRedux/posts/${updatePostResponse.id}`);\n      }\n    }\n  }, [\n    dispatch,\n    history,\n    updatePostResponse,\n    isUpdatingPost,\n    prevIsUpdatingPost,\n  ]);\n\n  return (\n    <>\n      {isGettingPost && <PostLoadingBackground />}\n      {userData && !isGettingPost && singlePostData && (\n        <Wrapper>\n          {singlePostData && singlePostData.length === 0 && (\n            <ErrorMessage>編輯的文章不存在</ErrorMessage>\n          )}\n          {singlePostData && singlePostData.length > 0 && (\n            <PostForm onSubmit={handleFormSubmit}>\n              <div>\n                <div>文章標題：</div>\n                <PostTitle\n                  value={titleValue}\n                  onChange={(e) => {\n                    setTitleValue(e.target.value);\n                  }}\n                  onFocus={() => {\n                    setUpdatePostResponse(null);\n                  }}\n                />\n              </div>\n              <div>\n                <div>文章內容：</div>\n                <PostBody\n                  rows={6}\n                  value={bodyValue}\n                  onChange={(e) => {\n                    setBodyValue(e.target.value);\n                  }}\n                  onFocus={() => {\n                    setUpdatePostResponse(null);\n                  }}\n                />\n              </div>\n              <div className=\"d-flex justify-content-center\">\n                {isUpdatingPost && <Spinner animation=\"border\" variant=\"primary\"/>}\n                {!isUpdatingPost && (\n                  <Button\n                    variant=\"primary\"\n                    size=\"lg\"\n                    className=\"\"\n                    type=\"submit\"\n                  >\n                    更新\n                  </Button>\n                )}\n              </div>\n              {updatePostResponse && updatePostResponse.ok === 0 && (\n                <AddPostErrorMessage>\n                  編輯文章失敗： {updatePostResponse.message}\n                </AddPostErrorMessage>\n              )}\n            </PostForm>\n          )}\n        </Wrapper>\n      )}\n    </>\n  );\n}\n","import { Switch, Route } from 'react-router-dom';\n\nimport HomePage from '../pages/HomePage';\nimport LoginPage from '../pages/LoginPage';\nimport RegisterPage from '../pages/RegisterPage';\nimport SinglePostPage from '../pages/SinglePostPage';\nimport AddPostPage from '../pages/AddPostPage';\nimport AboutPage from '../pages/AboutPage';\nimport PaginationPage from '../pages/PaginationPage';\nimport UpdatePostPage from '../pages/UpdatePostPage';\n\nexport default function MainRoutes() {\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <HomePage />\n      </Route>\n      <Route exact path=\"/about\">\n        <AboutPage />\n      </Route>\n      <Route exact path=\"/login\">\n        <LoginPage />\n      </Route>\n      <Route exact path=\"/register\">\n        <RegisterPage />\n      </Route>\n      <Route exact path=\"/pagination/:page\">\n        <PaginationPage />\n      </Route>\n      <Route exact path=\"/posts/:id\">\n        <SinglePostPage />\n      </Route>\n      <Route exact path=\"/new-post\">\n        <AddPostPage />\n      </Route>\n      <Route exact path=\"/update-post/:id\">\n        <UpdatePostPage />\n      </Route>\n      {/* 沒被上面攔截的其他網址都導至首頁 */}\n      <Route path=\"/\">\n        <HomePage />\n      </Route>\n    </Switch>\n  );\n}\n","/* eslint-disable import/no-unresolved */\nimport './App.css';\nimport React, { useEffect } from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { getUserData } from './redux/reducers/userReducer';\nimport styled from 'styled-components';\n\nimport Header from './components/Header';\nimport MainRoutes from './routes/MainRoutes';\nimport {\n  MEDIA_QUERY_TABLET,\n} from './constants/breakpoint';\n\nconst Layout = styled.div`\n  ${MEDIA_QUERY_TABLET} {\n    display: flex;\n    flex-direction: column;\n  }\n`;\n\nfunction BlogAppRedux() {\n  const dispatch = useDispatch();\n\n  // 只在初次 render App 時確認身分\n  useEffect(() => {\n    dispatch(getUserData());\n  }, [dispatch]);\n\n  return (\n    <Router>\n      <Layout>\n        <Header>header</Header>\n        <MainRoutes/>\n      </Layout>\n    </Router>\n  );\n}\n\nexport default BlogAppRedux;\n","/* eslint-disable import/no-unresolved */\n// 引入 bootstrap 的 CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// 引入主題(可設定類似 mixin 的全域變數供使用\n//  import { ThemeProvider } from \"styled-components\";\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport BlogAppRedux from './App';\n\n// <React.StrictMode> 嚴格模式可能會造成偵錯問題，可先取消\nReactDOM.render(\n  <Provider store={store}>\n    <BlogAppRedux />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}